---
comments: true
date: 2015-12-10T14:49:18+09:00
eyecatch: "program3.jpg"
slug: "using-hugo-in-production"
tags: ["golang", "hugo", "wordpress", "static-site-generator"]
title: "プロダクションのWordPressを捨てHugoに移行した"
---

あんまり仕事のことは書かないつもりだったんだけど、このブログの生成でもお世話になっている[Hugo](https://gohugo.io/)を結構本気で使ったのでそのことをまとめてみます。

## Hugoをプロダクションで使った

いま僕が働いている会社では事業の一つとしてメディアを運営しています。
僕が入ったとき、それはWordPressで運用がなされていて、[Advanced Custom Fields](http://www.advancedcustomfields.com/)を使ったガチガチのカスタム具合でした。

しかしありがちなことにプラグインの管理もなされず、構築した人は外部の人、つまり動いてはいるけどそれ以上でも以下でもなかったんですね。

さらにライターさんの話を聞いてみれば「なんか入力欄がいっぱいあってライティングがめんどくさい」とのこと。

**誰も幸せになっていない状態**というわけですね。

僕が初めてそれを見た時、まず思ったのは**「触りたくない」**ということでした。

WordPressはドメインとガチガチに紐づくし（プラグインでなんとかなるけど）、テーマのカスタマイズだとかのコストや、現状調査をするコストが無駄だと思ったんですね。

また、Advanced Custom Fieldsを使っているということはテーマも特注でしょう。

というわけでリプレースを提案しました。
快く受け入れてくれた社員の方々には本当に感謝しています。

## なぜHugoなのか

やはりMarkdownは優秀だと思っていて、メディア程度の文章ならDBに突っ込むよりMarkdownでファイル管理したいなと思いました。

というわけでライターさんには無理を言ってMarkdownを覚えてもらいました。
これも快く受け入れてくれたライターさんの度量の広さに感謝しています。

正直僕はハナから静的サイトジェネレータを使う気でいて、候補に考えていたのはJekyllとHugoでした。
何故かと言うと、Jekyllはドキュメント量が期待できると思っていたし、Hugoはそもそも使い慣れてる点を評価したからです。

しかしJekyllは使いませんでした。Octopressをやめた時同様、生成が遅すぎたんです。
約500超の記事生成に18秒ほどかかり、チューニングなどを検討するよりもやめたほうが早いと判断しました。

というわけで案外さっくりとHugoに行き着くことになったわけです。

## 運用体制のこと

静的サイトジェネレータを使うということは何かしらの方法でMarkdownを取り込み、生成したHTMLをアップロードしなければなりません。

とはいえ管理画面だとかを作ってMarkdownを吐き出させるのは無駄なコストにしか思えないし、
素直にMarkdownが書けてそのままHugoを動かす環境に取り込める仕組みを考える必要がありました。

なるだけコードを書きたくなかったのです。

僕の開発部ではBitBucketのプライベートレポジトリを活用しています。

GitHubも同様で、SCMのホスティングサービスではGUIで直接ファイルをいじる機能があります。
実際これを使ったことはあまりないのですが、今回はこの機能に管理画面の代替品になってもらうことにしました。

なのでライターさんはWordPressの管理画面を捨て、BitBucketを管理画面として使うことになるわけです。

実際これでだいたいの運用は回っています。ですが1つだけ想定していなかったポイントがありました。

それは**画像のアップロードが出来ない**ことです。
記事に使いたい画像をGUIからアップすることが出来なかったのです。

幸いこの問題は、デザイナさんがGitに慣れていたこともあり、SourceTreeから画像をアップしてくれることになりました。

つくづく社員の方に恵まれていると思います。

## 移行するためにやったこと

では僕が大きく時間を割いたポイントをお話します。

それは次の2点です。

### WordPressからのエクスポート

既存記事をMarkdownとして取り出す必要がありました。
これはいろいろなツールを検討したのですが、結局最終的にはスクレイピングして力技で取得しました。

Pythonで抽出を行ったのですが、使い捨てプログラムということで適当に書きすぎたこともあり、500記事の抽出に数分かかるような有様になりました。

ちなみにHugo用の移行ツールも何種類かあるようです。

[Hugo - Tools](https://gohugo.io/tools/#migration:d680e8a854a7cbad6d490c445cba2eba)

### テーマの作成

Markdownが生成出来てしまえばあとはHugoのルールに乗っかるだけなので、サイトが形作られるのはあっというまでした。

とはいえGolangのテンプレートの仕様に慣れがなかったため、初めは想定した動作をしてもらえずイライラする場面も多かったです。

## Hugoを使うことの強み

僕が感じた強みはシンプルさでした。

UNIX哲学にこんな言葉があります。

> 全てのプログラムはフィルタとして振る舞うようにせよ。  
> Make every program a Filter.

[UNIX哲学 - Wikipedia](https://ja.wikipedia.org/wiki/UNIX%E5%93%B2%E5%AD%A6)

おそらくこれに該当するもっともな例はシェルだと思うのですが、実はHugoもまさにこれを体現しているようなもので、Markdownを一定のルールに従ってテーマというフィルタに通すだけのプログラムになっています。

なのでそのルールさえ理解してしまえばテーマを作るのは容易で、約1週間程度でほぼ完成形につくり上げることが出来ました。

## Hugoを使うことの弱み

とはいえ静的サイトジェネレータだからこその弱みもあると思っています。

### テンプレートエンジンが難しい

テンプレートの書き方によってはパフォーマンスがガッツリ落ちる時があり、たかが500記事でも18秒ほどかかってしまうこともありました。

これではHugoの強みである速さを活かしきれてないことになってしまいますね。

結局チューニングをしたものの、やはり企業として運営しているサイトのため要求も多く、現在は7秒程度で生成する状況で落ち着きました。

ゆくゆくはせめて3秒以内に抑えたいとは思っています。

また、個人的にGolangのテンプレートと相性が悪いようで、その点は結構苦労しました。

### よく読まれている記事が抽出出来ない

これはもうどうしょうもないので、GoogleAnalyticsにアクセスしてJSONを吐き出しておくスクリプトを用意しました。

HugoはJSONを読み込んで記事を生成するような構成にしています。

[Hugo - Data Files](https://gohugo.io/extras/datafiles/)

このデータファイルという機能は非常に優秀で、タグやカテゴリを英名 - 和名変換するためにも利用しています。簡易KVSですね。

### サムネイルの作成が出来ない

これもどうしょうもないので、スクリプトを用意しました。

Pythonで書けば数行で出来てしまうため、10分20分で実装出来たのはラッキーでした。

これがないとPageSpeedInsightのスコアが大きく下がるため、見落とさずに対応できて良かったです。

## 運用を始めてみて

僕の操作ミスでサービスダウンさせた場面は2度ほどありましたが、Hugoだから発生した問題は1つもありません。

レスポンスタイムは大きく向上し、PageSpeedInsightもほぼ全ページが90点超えとなりました（これはHugo関係ないが）。

しかしライターさんにMarkdownを覚えてもらったのはやはり少し気にかかっていて、Hugo特有のメタデータなどは出来る限りフォローに入るよう気をつけています。

また、生成はcronで定時処理しており、その処理ログをSlackに流すようにしています。

Slack側では「ERROR」という文言を含むメッセージが発せられた場合にアラートがあげられるようにしており、簡易的な監視ツールとして手軽に立ち上げられたのではないかと思っています。

そして、この運用による恩恵もいくつかあります。

### プルリクエストが使えるようになった

メディアということで大量の記事を抱えているわけですが、その個々の記事のクオリティを上げる必要があります。

この運用だとBitBucket上に記事データがあるため、プルリクエストをライターさんになげる運用ができるようになりました。

ソーシャルコーディングならぬ、ソーシャルライティングですね。

### 編集履歴が残るようになった

これはWordPressでも機能としてあるのかもしれませんが、Gitによる強力なバージョン管理が行えるようになりました。

記事ファイルがどのような変遷をたどってきたか、どの行を誰が書いたのかがわかるのは大きなメリットだと思います。

### 記事の一括操作が出来るようになった

記事データがテキストファイルで存在するため、一括置換が容易になりました。

これまでもタグやカテゴリの設定しなおし等を行いたい場面があったようですが、そういった作業も人間の手を介さずに一瞬で行えるようになりました。

記事を柔軟に扱うという点では、WordPressでの運用より10歩も20歩も前進出来たように思います。

データをテキストファイルで保持できているので、エンジニアとしてもプラシーボ的な安心があります。

### 校正が自動化出来るようになった

文章を扱うサービスということもあり、ライティングルールを定めています。

とはいえ現状どうかというと、結構な割合で守られていません。
しかしこれは書き手のチェックに委ねられていたため、しかたのないことだと思います。

今回はテキストファイルとしてデータがあるので、正規表現でチェック出来るような校正はシェル化出来ました。

これは毎週金曜日の夕方に処理されるようになっており、アラートが上がった記事はSlackに通知されるようになっています。

また、サイズの大きい画像などが格納された場合も同様で、この処理の際にアラートがあがるようにしてあります。

## 終わりに

というわけでWordPressから静的サイトジェネレータへの移行を会社でおこなった話を書きました。

現在は非常に安定して運用が出来ており、なおかつ非常に早いスピードで改修が出来ています。

WordPressでの運用に手こずっている方は、一度静的サイトジェネレータでの運用も検討してはいいのではないでしょうか。

素晴らしきプロダクトである[Hugo](https://gohugo.io/)と開発者である[Steve Francia氏](http://spf13.com/)に感謝。

