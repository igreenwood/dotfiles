# -*- coding: utf-8 -*-

from uuid import uuid4
import magic
import urllib
import shutil
import yaml

from flask.ext.sqlalchemy import SQLAlchemy
from flask import Flask, render_template, request, redirect, url_for, flash, session, abort, jsonify

app = Flask(__name__)

# Load config
f = open('./config.yaml', 'r')
app.env = yaml.load(f)
f.close()

# Make database
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqldb://{0}:{1}@{2}/{3}'.format(
    app.env['database']['user'],
    app.env['database']['password'],
    app.env['database']['host'],
    app.env['database']['database'],
    )
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True
db = SQLAlchemy(app)

# Set secret key
app.secret_key = app.env['secret']

# Debug mode
app.debug = app.env['debug']

# Constant
const = {
        'paging_number': 16
        }

# Protect for csrf
@app.before_request
def csrf_protect():
    if request.method == "POST":
        token = session.pop('_csrf_token', None)
        if not token or token != request.form.get('_csrf_token'):
            abort(403)

def generate_csrf_token():
    if '_csrf_token' not in session:
        session['_csrf_token'] = str(uuid4())
    print(session['_csrf_token'])
    return session['_csrf_token']

app.jinja_env.globals['csrf_token'] = generate_csrf_token


class Post(db.Model):
    __tablename__ = 'posts'
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(512))
    url = db.Column(db.String(2048))
    tags = db.Column(db.String(512))
    mime = db.Column(db.String(128))
    ua = db.Column(db.String(2048))
    likes = db.Column(db.Integer, default=0)
    views = db.Column(db.Integer, default=0)
    created_at = db.Column(db.DateTime)
    updated_at = db.Column(db.DateTime)

    def is_liked(self):
        return str(self.id) in session.get('liked', [])


@app.route('/', methods=['GET'])
def post_index(page_number=1):
    posts = []
    posts_views = []
    posts_likes = []
    try:
        offset = const.get('paging_number', 16) * (page_number - 1)
        if page_number is None:
            posts = Post.query.order_by(Post.created_at.desc()).limit(const.get('paging_number', 16))
        else:
            posts = Post.query.order_by(Post.created_at.desc()).limit(const.get('paging_number', 16)).offset(offset)
        posts_views = Post.query.order_by(Post.views.desc()).limit(4)
        posts_likes = Post.query.order_by(Post.likes.desc()).limit(4)
    except Exception as e:
        print(e)

    pager = {
            'has_prev': False,
            'has_next': False,
            'current_page': page_number,
            'total_page': 1,
            }

    try:
        post_count = Post.query.count()
        total_page = int(post_count / const.get('paging_number', 16))
        total_page_ex = int(post_count % const.get('paging_number', 16))
        if total_page != 0 and total_page_ex != 0:
            pager['total_page'] = total_page + 1

        if pager.get('current_page', 0) != pager.get('total_page', 0):
            pager['has_next'] = True

        if pager.get('current_page', 0) != 1 and pager.get('total_page', 0) != 1:
            pager['has_prev'] = True

    except Exception as e:
        print(e)

    return render_template('post.index.html',
                           posts=posts,
                           posts_views=posts_views,
                           posts_likes=posts_likes,
                           pager=pager)

@app.route('/tags/<tag>', methods=['GET'])
def tag_index(tag):
    posts = []
    try:
        posts = Post.query.filter(Post.tags.like('%' + tag + '%')).order_by(Post.created_at.desc())
    except Exception as e:
        print(e)

    except Exception as e:
        print(e)

    return render_template('post.index.html',
                           posts=posts,
                           title=u'タグに[' + tag + u']を含む')


@app.route('/post/<int:post_id>', methods=['GET'])
def post_show(post_id):
    post = None
    try:
        post = Post.query.filter_by(id=post_id).first()
        post.views = post.views + 1
        db.session.commit()
    except Exception as e:
        print(e)

    prev_post = None
    next_post = None
    try:
        prev_post = Post.query.order_by(Post.id.desc()).filter(Post.id < post.id).first()
        next_post = Post.query.order_by(Post.id).filter(Post.id > post.id).first()
    except Exception as e:
        print(e)

    related_posts = None
    try:
        if post.tags:
            first_tag = post.tags.split(',')[0]
            related_posts = Post.query.filter(Post.tags.like('%' + first_tag + '%')).order_by(Post.created_at.desc())
    except Exception as e:
        print(e)

    return render_template('post.show.html',
            post=post,
            prev_post=prev_post,
            next_post=next_post,
            related_posts=related_posts)


@app.route('/post/page/<int:page_number>', methods=['GET'])
def post_paging(page_number):
    return post_index(page_number)


@app.route('/post/new', methods=['POST'])
def post_new():
    try:
        # check
        if request.form.get('url') is None or request.form.get('url') == '':
            flash('omg! URL is empty X(')
            return redirect(url_for('post_index'))
        if request.form.get('title') is None or request.form.get('title') == '':
            flash('omg! TITLE is empty X(')
            return redirect(url_for('post_index'))

        # file upload
        file_name, head = urllib.urlretrieve(request.form.get('url'))
        mime = magic.Magic(mime=True).from_file(file_name).decode("utf-8")
        if not mime == 'image/gif':
            flash('omg! Uploading image is not gif file X(')
            return redirect(url_for('post_index'))

        # insert record
        post = Post()
        post.title = request.form.get('title', '')[:500]
        post.url = request.form.get('url', '')[:2048]
        post.tags = request.form.get('tags', '')[:500]
        post.mime = mime
        post.ua = ''
        db.session.add(post)
        db.session.commit()

        # file move
        dest = '/srv/www/giflib/static/images/uploads/' + str(post.id) + '.gif'
        shutil.move(file_name, dest)

    except Exception as e:
        print(e)

    return redirect(url_for('post_index'))


@app.route('/post/like', methods=['post'])
def post_like():
    post_id=request.form.get('id')
    liked = session.get('liked', [])

    if not str(post_id) in session.get('liked', []):
        post = Post.query.filter_by(id=post_id).first()
        post.likes = post.likes + 1
        db.session.commit()

    liked.append(post_id)
    session['liked'] = liked
    return jsonify(result=post.likes)


@app.route('/about', methods=['GET'])
def fixed_about():
    return render_template('fixed.about.html')


@app.route('/terms', methods=['GET'])
def fixed_terms():
    return render_template('fixed.terms.html')


@app.route('/policy', methods=['GET'])
def fixed_policy():
    return render_template('fixed.policy.html')


if __name__ == '__main__':
    app.run(host='0.0.0.0')

